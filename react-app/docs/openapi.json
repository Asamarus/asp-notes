{
  "openapi": "3.0.1",
  "info": {
    "title": "AspNotes API",
    "version": "v1"
  },
  "paths": {
    "/api/accounts/login": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieves a specific account by unique id",
        "description": "Retrieves the account details",
        "parameters": [
          {
            "name": "withToken",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Account has missing/invalid values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/getUser": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieves the currently logged in user",
        "description": "Returns a response containing the user's details",
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/accounts/logout": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Logs out the user",
        "description": "Deletes the JWT token from the cookies",
        "responses": {
          "200": {
            "description": "User logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/accounts/changePassword": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Changes the password of the user",
        "description": "Requires the current password for verification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid current password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/books/getList": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Retrieves a list of books based on the provided section.",
        "requestBody": {
          "description": "The request containing the section to filter books.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBooksListRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBooksListRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetBooksListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of books.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookItemResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the section name is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/books/autocomplete": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Provides book name suggestions based on the input term and optional section.",
        "requestBody": {
          "description": "The autocomplete request containing the search term and optional section.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteBooksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteBooksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteBooksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of suggested book names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the section name is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/search": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Searches for notes based on the provided search criteria.",
        "requestBody": {
          "description": "The search criteria for notes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchNotesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchNotesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchNotesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchNotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the search criteria are not valid, for example, if a specified section does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/autocomplete": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Provides autocomplete suggestions for notes, books, and tags based on the provided search term and optional section.",
        "requestBody": {
          "description": "The autocomplete request containing the search term and optional section.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteNotesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteNotesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteNotesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the autocomplete suggestions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteNotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the search criteria are not valid, for example, if a specified section does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/get": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieves a specific note by its ID.",
        "requestBody": {
          "description": "The request containing the ID of the note to retrieve.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested note details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note with the specified ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/create": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Creates a new note in the specified section.",
        "requestBody": {
          "description": "The request containing the details for creating a new note, including the section and optional book.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the details of the created note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the specified section is not found or the book update fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/update": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Updates the title and content of an existing note.",
        "requestBody": {
          "description": "The request containing the ID of the note to update along with the new title and content.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated note details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note with the specified ID is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/updateBook": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Updates the book associated with a specific note.",
        "requestBody": {
          "description": "The request containing the ID of the note and the new book details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteBookRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteBookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteBookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success message and the updated note details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note with the specified ID is not found or the book update fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/updateTags": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Updates the tags associated with a specific note.",
        "requestBody": {
          "description": "The request containing the ID of the note and the new tags.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteTagsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteTagsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteTagsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success message and the updated note details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note with the specified ID is not found or the tags update fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/updateSection": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Updates the section of a specific note.",
        "requestBody": {
          "description": "The request containing the ID of the note and the new section name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSectionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSectionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success message indicating the note has been moved to another section, along with the updated note details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the section name is invalid, the note is not found, or updates to the book or tags fail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/delete": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Deletes a specific note by its ID.",
        "requestBody": {
          "description": "The request containing the ID of the note to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteNoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteNoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success message indicating the note has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note is not found or the deletion fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/notes/getCalendarDays": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieves a list of days within a specified month and year, optionally filtered by section, that contain notes.",
        "requestBody": {
          "description": "The request containing the month, year, and optional section to filter the calendar days.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteCalendarDaysRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteCalendarDaysRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetNoteCalendarDaysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of calendar days that contain notes, each with the date and the number of notes for that day.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteCalendarDaysResponseItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sections/getList": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Retrieves all sections",
        "description": "Returns a list of all sections",
        "responses": {
          "200": {
            "description": "Sections retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sections/create": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Creates a new section with the provided details.",
        "requestBody": {
          "description": "The details of the section to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSectionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSectionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the section is created successfully. The response includes the details of all sections.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the section name is not unique.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sections/update": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Updates an existing section with the provided details.",
        "requestBody": {
          "description": "The details of the section to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSectionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSectionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the section is updated successfully. The response includes the updated list of sections.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the section with the provided ID is not found or the update operation fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sections/delete": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Deletes a section based on the provided section ID.",
        "requestBody": {
          "description": "The request containing the ID of the section to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSectionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSectionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the section is deleted successfully. The response includes the updated list of sections.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the section with the provided ID is not found or the deletion operation fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sections/reorder": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Reorders sections based on the provided order.",
        "requestBody": {
          "description": "The request containing the new order of sections.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderSectionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderSectionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderSectionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the sections are reordered successfully. The response includes the updated list of sections.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the reorder operation fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sources/add": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Adds a new source to a note.",
        "requestBody": {
          "description": "The request containing the note ID and source URL to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNoteSourceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNoteSourceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddNoteSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated list of sources for the note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note is not found or the request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sources/update": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Updates an existing source of a note.",
        "requestBody": {
          "description": "The request containing the note ID, source ID, and new source details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSourceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSourceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated list of sources for the note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note or source is not found or the request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sources/remove": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Removes a source from a note.",
        "requestBody": {
          "description": "The request containing the note ID and source ID to remove.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveNoteSourceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveNoteSourceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveNoteSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated list of sources for the note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note or source is not found or the request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sources/reorder": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Reorders the sources of a note.",
        "requestBody": {
          "description": "The request containing the note ID and a list of source IDs in the new order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderNoteSourcesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderNoteSourcesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderNoteSourcesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the reordered list of sources for the note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the note is not found, a source is not found, or the request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/tags/getList": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieves a list of tags based on the provided section.",
        "requestBody": {
          "description": "The request containing the section to filter tags.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTagsListRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTagsListRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTagsListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagItemResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the section name is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/tags/autocomplete": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Provides tag name suggestions based on the input term and optional section.",
        "requestBody": {
          "description": "The autocomplete request containing the search term and optional section.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteTagsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteTagsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteTagsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of suggested tag names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the section name is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddNoteSourceRequest": {
        "required": [
          "link",
          "noteId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "link": {
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "AutoCompleteNotesItemResponse": {
        "required": [
          "id",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutocompleteBooksRequest": {
        "required": [
          "searchTerm"
        ],
        "type": "object",
        "properties": {
          "searchTerm": {
            "minLength": 2,
            "type": "string"
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutocompleteNotesRequest": {
        "required": [
          "searchTerm"
        ],
        "type": "object",
        "properties": {
          "searchTerm": {
            "minLength": 2,
            "type": "string"
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "book": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutocompleteNotesResponse": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoCompleteNotesItemResponse"
            },
            "nullable": true
          },
          "books": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutocompleteTagsRequest": {
        "required": [
          "searchTerm"
        ],
        "type": "object",
        "properties": {
          "searchTerm": {
            "minLength": 2,
            "type": "string"
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookItemResponse": {
        "required": [
          "count",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "required": [
          "currentPassword",
          "newPassword",
          "passwordRepeat"
        ],
        "type": "object",
        "properties": {
          "currentPassword": {
            "minLength": 6,
            "type": "string"
          },
          "newPassword": {
            "minLength": 6,
            "type": "string"
          },
          "passwordRepeat": {
            "minLength": 6,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateNoteRequest": {
        "required": [
          "section"
        ],
        "type": "object",
        "properties": {
          "section": {
            "minLength": 1,
            "type": "string"
          },
          "book": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSectionRequest": {
        "required": [
          "color",
          "displayName",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 20,
            "minLength": 2,
            "pattern": "^[a-z0-9_]+$",
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "minLength": 1,
            "pattern": "^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeleteNoteRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "DeleteSectionRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "showNotification": {
            "type": "boolean"
          },
          "field": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetBooksListRequest": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNoteCalendarDaysRequest": {
        "required": [
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNoteRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetTagsListRequest": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 6,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteCalendarDaysResponseItem": {
        "required": [
          "count",
          "date"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "NoteItemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "preview": {
            "type": "string",
            "nullable": true
          },
          "book": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteSource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteResponse": {
        "required": [
          "note"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "showNotification": {
            "type": "boolean"
          },
          "note": {
            "$ref": "#/components/schemas/NoteItemResponse"
          }
        },
        "additionalProperties": false
      },
      "NoteSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "showImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RemoveNoteSourceRequest": {
        "required": [
          "noteId",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "sourceId": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReorderNoteSourcesRequest": {
        "required": [
          "noteId",
          "sourceIds"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "sourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ReorderSectionsRequest": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchNotesRequest": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          },
          "searchTerm": {
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "page": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "book": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "inRandomOrder": {
            "type": "boolean"
          },
          "withoutBook": {
            "type": "boolean"
          },
          "withoutTags": {
            "type": "boolean"
          },
          "fromDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "toDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchNotesResponse": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteItemResponse"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "lastPage": {
            "type": "integer",
            "format": "int32"
          },
          "canLoadMore": {
            "type": "boolean"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "searchTerm": {
            "type": "string",
            "nullable": true
          },
          "keywords": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "foundWholePhrase": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SectionItemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SectionsResponse": {
        "required": [
          "sections"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "showNotification": {
            "type": "boolean"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectionItemResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceItemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "showImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SourcesResponse": {
        "required": [
          "sources"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "showNotification": {
            "type": "boolean"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceItemResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "showNotification": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TagItemResponse": {
        "required": [
          "count",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteBookRequest": {
        "required": [
          "book",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "book": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteRequest": {
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteSectionRequest": {
        "required": [
          "id",
          "section"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "section": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteSourceRequest": {
        "required": [
          "link",
          "noteId",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "noteId": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "sourceId": {
            "minLength": 1,
            "type": "string"
          },
          "link": {
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "showImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateNoteTagsRequest": {
        "required": [
          "id",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateSectionRequest": {
        "required": [
          "color",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "minLength": 1,
            "pattern": "^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme",
        "scheme": "bearer"
      }
    }
  }
}