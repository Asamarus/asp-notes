/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/accounts/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieves a specific account by unique id
         * @description Retrieves the account details
         */
        post: {
            parameters: {
                query?: {
                    withToken?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                    "text/json": components["schemas"]["LoginRequest"];
                    "application/*+json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Account details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Account has missing/invalid values */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/getUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieves the currently logged in user
         * @description Returns a response containing the user's details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logs out the user
         * @description Deletes the JWT token from the cookies
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/changePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Changes the password of the user
         * @description Requires the current password for verification
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordRequest"];
                    "text/json": components["schemas"]["ChangePasswordRequest"];
                    "application/*+json": components["schemas"]["ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Password updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Invalid current password */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/getList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of books based on the provided section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the section to filter books. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GetBooksListRequest"];
                    "text/json": components["schemas"]["GetBooksListRequest"];
                    "application/*+json": components["schemas"]["GetBooksListRequest"];
                };
            };
            responses: {
                /** @description Returns the list of books. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookItemResponse"][];
                    };
                };
                /** @description If the section name is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/autocomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Provides book name suggestions based on the input term and optional section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The autocomplete request containing the search term and optional section. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AutocompleteBooksRequest"];
                    "text/json": components["schemas"]["AutocompleteBooksRequest"];
                    "application/*+json": components["schemas"]["AutocompleteBooksRequest"];
                };
            };
            responses: {
                /** @description Returns the list of suggested book names. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description If the section name is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Searches for notes based on the provided search criteria. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The search criteria for notes. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SearchNotesRequest"];
                    "text/json": components["schemas"]["SearchNotesRequest"];
                    "application/*+json": components["schemas"]["SearchNotesRequest"];
                };
            };
            responses: {
                /** @description Returns the search results. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchNotesResponse"];
                    };
                };
                /** @description If the search criteria are not valid, for example, if a specified section does not exist. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/autocomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Provides autocomplete suggestions for notes, books, and tags based on the provided search term and optional section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The autocomplete request containing the search term and optional section. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AutocompleteNotesRequest"];
                    "text/json": components["schemas"]["AutocompleteNotesRequest"];
                    "application/*+json": components["schemas"]["AutocompleteNotesRequest"];
                };
            };
            responses: {
                /** @description Returns the autocomplete suggestions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AutocompleteNotesResponse"];
                    };
                };
                /** @description If the search criteria are not valid, for example, if a specified section does not exist. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a specific note by its ID. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note to retrieve. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GetNoteRequest"];
                    "text/json": components["schemas"]["GetNoteRequest"];
                    "application/*+json": components["schemas"]["GetNoteRequest"];
                };
            };
            responses: {
                /** @description Returns the requested note details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the note with the specified ID is not found. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new note in the specified section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the details for creating a new note, including the section and optional book. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateNoteRequest"];
                    "text/json": components["schemas"]["CreateNoteRequest"];
                    "application/*+json": components["schemas"]["CreateNoteRequest"];
                };
            };
            responses: {
                /** @description Returns the details of the created note. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the specified section is not found or the book update fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the title and content of an existing note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note to update along with the new title and content. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateNoteRequest"];
                    "text/json": components["schemas"]["UpdateNoteRequest"];
                    "application/*+json": components["schemas"]["UpdateNoteRequest"];
                };
            };
            responses: {
                /** @description Returns the updated note details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the note with the specified ID is not found. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/updateBook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the book associated with a specific note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note and the new book details. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateNoteBookRequest"];
                    "text/json": components["schemas"]["UpdateNoteBookRequest"];
                    "application/*+json": components["schemas"]["UpdateNoteBookRequest"];
                };
            };
            responses: {
                /** @description Returns a success message and the updated note details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the note with the specified ID is not found or the book update fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/updateTags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the tags associated with a specific note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note and the new tags. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateNoteTagsRequest"];
                    "text/json": components["schemas"]["UpdateNoteTagsRequest"];
                    "application/*+json": components["schemas"]["UpdateNoteTagsRequest"];
                };
            };
            responses: {
                /** @description Returns a success message and the updated note details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the note with the specified ID is not found or the tags update fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/updateSection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the section of a specific note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note and the new section name. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateNoteSectionRequest"];
                    "text/json": components["schemas"]["UpdateNoteSectionRequest"];
                    "application/*+json": components["schemas"]["UpdateNoteSectionRequest"];
                };
            };
            responses: {
                /** @description Returns a success message indicating the note has been moved to another section, along with the updated note details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteResponse"];
                    };
                };
                /** @description If the section name is invalid, the note is not found, or updates to the book or tags fail. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deletes a specific note by its ID. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the note to be deleted. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeleteNoteRequest"];
                    "text/json": components["schemas"]["DeleteNoteRequest"];
                    "application/*+json": components["schemas"]["DeleteNoteRequest"];
                };
            };
            responses: {
                /** @description Returns a success message indicating the note has been deleted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description If the note is not found or the deletion fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/getCalendarDays": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of days within a specified month and year, optionally filtered by section, that contain notes. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the month, year, and optional section to filter the calendar days. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GetNoteCalendarDaysRequest"];
                    "text/json": components["schemas"]["GetNoteCalendarDaysRequest"];
                    "application/*+json": components["schemas"]["GetNoteCalendarDaysRequest"];
                };
            };
            responses: {
                /** @description Returns a list of calendar days that contain notes, each with the date and the number of notes for that day. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoteCalendarDaysResponseItem"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sections/getList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieves all sections
         * @description Returns a list of all sections
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sections retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionsResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sections/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new section with the provided details. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The details of the section to create. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSectionRequest"];
                    "text/json": components["schemas"]["CreateSectionRequest"];
                    "application/*+json": components["schemas"]["CreateSectionRequest"];
                };
            };
            responses: {
                /** @description If the section is created successfully. The response includes the details of all sections. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionsResponse"];
                    };
                };
                /** @description If the section name is not unique. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sections/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates an existing section with the provided details. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The details of the section to update. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateSectionRequest"];
                    "text/json": components["schemas"]["UpdateSectionRequest"];
                    "application/*+json": components["schemas"]["UpdateSectionRequest"];
                };
            };
            responses: {
                /** @description If the section is updated successfully. The response includes the updated list of sections. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionsResponse"];
                    };
                };
                /** @description If the section with the provided ID is not found or the update operation fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sections/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deletes a section based on the provided section ID. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the ID of the section to delete. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeleteSectionRequest"];
                    "text/json": components["schemas"]["DeleteSectionRequest"];
                    "application/*+json": components["schemas"]["DeleteSectionRequest"];
                };
            };
            responses: {
                /** @description If the section is deleted successfully. The response includes the updated list of sections. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionsResponse"];
                    };
                };
                /** @description If the section with the provided ID is not found or the deletion operation fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sections/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reorders sections based on the provided order. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the new order of sections. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReorderSectionsRequest"];
                    "text/json": components["schemas"]["ReorderSectionsRequest"];
                    "application/*+json": components["schemas"]["ReorderSectionsRequest"];
                };
            };
            responses: {
                /** @description If the sections are reordered successfully. The response includes the updated list of sections. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionsResponse"];
                    };
                };
                /** @description If the reorder operation fails. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds a new source to a note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the note ID and source URL to add. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AddNoteSourceRequest"];
                    "text/json": components["schemas"]["AddNoteSourceRequest"];
                    "application/*+json": components["schemas"]["AddNoteSourceRequest"];
                };
            };
            responses: {
                /** @description Returns the updated list of sources for the note. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SourcesResponse"];
                    };
                };
                /** @description If the note is not found or the request is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates an existing source of a note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the note ID, source ID, and new source details. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateNoteSourceRequest"];
                    "text/json": components["schemas"]["UpdateNoteSourceRequest"];
                    "application/*+json": components["schemas"]["UpdateNoteSourceRequest"];
                };
            };
            responses: {
                /** @description Returns the updated list of sources for the note. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SourcesResponse"];
                    };
                };
                /** @description If the note or source is not found or the request is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Removes a source from a note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the note ID and source ID to remove. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RemoveNoteSourceRequest"];
                    "text/json": components["schemas"]["RemoveNoteSourceRequest"];
                    "application/*+json": components["schemas"]["RemoveNoteSourceRequest"];
                };
            };
            responses: {
                /** @description Returns the updated list of sources for the note. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SourcesResponse"];
                    };
                };
                /** @description If the note or source is not found or the request is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sources/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reorders the sources of a note. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the note ID and a list of source IDs in the new order. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReorderNoteSourcesRequest"];
                    "text/json": components["schemas"]["ReorderNoteSourcesRequest"];
                    "application/*+json": components["schemas"]["ReorderNoteSourcesRequest"];
                };
            };
            responses: {
                /** @description Returns the reordered list of sources for the note. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SourcesResponse"];
                    };
                };
                /** @description If the note is not found, a source is not found, or the request is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/getList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of tags based on the provided section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The request containing the section to filter tags. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GetTagsListRequest"];
                    "text/json": components["schemas"]["GetTagsListRequest"];
                    "application/*+json": components["schemas"]["GetTagsListRequest"];
                };
            };
            responses: {
                /** @description Returns the list of tags. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagItemResponse"][];
                    };
                };
                /** @description If the section name is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/autocomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Provides tag name suggestions based on the input term and optional section. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The autocomplete request containing the search term and optional section. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AutocompleteTagsRequest"];
                    "text/json": components["schemas"]["AutocompleteTagsRequest"];
                    "application/*+json": components["schemas"]["AutocompleteTagsRequest"];
                };
            };
            responses: {
                /** @description Returns the list of suggested tag names. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description If the section name is invalid. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddNoteSourceRequest: {
            /** Format: int64 */
            noteId: number;
            /** Format: uri */
            link: string;
        };
        AutoCompleteNotesItemResponse: {
            /** Format: int64 */
            id: number;
            title: string | null;
        };
        AutocompleteBooksRequest: {
            searchTerm: string;
            section?: string | null;
        };
        AutocompleteNotesRequest: {
            searchTerm: string;
            section?: string | null;
            book?: string | null;
        };
        AutocompleteNotesResponse: {
            notes?: components["schemas"]["AutoCompleteNotesItemResponse"][] | null;
            books?: string[] | null;
            tags?: string[] | null;
        };
        AutocompleteTagsRequest: {
            searchTerm: string;
            section?: string | null;
        };
        BookItemResponse: {
            name: string | null;
            /** Format: int64 */
            count: number;
        };
        ChangePasswordRequest: {
            currentPassword: string;
            newPassword: string;
            passwordRepeat: string;
        };
        CreateNoteRequest: {
            section: string;
            book?: string | null;
        };
        CreateSectionRequest: {
            name: string;
            displayName: string;
            color: string;
        };
        DeleteNoteRequest: {
            /** Format: int64 */
            id: number;
        };
        DeleteSectionRequest: {
            /** Format: int64 */
            id: number;
        };
        ErrorResponse: {
            message?: string | null;
            showNotification?: boolean;
            field?: string | null;
        };
        GetBooksListRequest: {
            section?: string | null;
        };
        GetNoteCalendarDaysRequest: {
            /** Format: int32 */
            month: number;
            /** Format: int32 */
            year: number;
            section?: string | null;
        };
        GetNoteRequest: {
            /** Format: int64 */
            id: number;
        };
        GetTagsListRequest: {
            section?: string | null;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        LoginResponse: {
            id?: string | null;
            email?: string | null;
            token?: string | null;
        };
        NoteCalendarDaysResponseItem: {
            /** Format: int64 */
            count: number;
            /** Format: date */
            date: string;
        };
        NoteItemResponse: {
            /** Format: int64 */
            id?: number;
            createdAt?: string | null;
            updatedAt?: string | null;
            title?: string | null;
            section?: string | null;
            content?: string | null;
            preview?: string | null;
            book?: string | null;
            tags?: string[] | null;
            sources?: components["schemas"]["NoteSource"][] | null;
        };
        NoteResponse: {
            message?: string | null;
            showNotification?: boolean;
            note: components["schemas"]["NoteItemResponse"];
        };
        NoteSource: {
            id?: string | null;
            link?: string | null;
            title?: string | null;
            description?: string | null;
            image?: string | null;
            showImage?: boolean;
        };
        RemoveNoteSourceRequest: {
            /** Format: int64 */
            noteId: number;
            sourceId: string;
        };
        ReorderNoteSourcesRequest: {
            /** Format: int64 */
            noteId: number;
            sourceIds: string[];
        };
        ReorderSectionsRequest: {
            ids: number[];
        };
        SearchNotesRequest: {
            section?: string | null;
            searchTerm?: string | null;
            /** Format: int32 */
            page?: number;
            book?: string | null;
            tags?: string[] | null;
            inRandomOrder?: boolean;
            withoutBook?: boolean;
            withoutTags?: boolean;
            /** Format: date */
            fromDate?: string | null;
            /** Format: date */
            toDate?: string | null;
        };
        SearchNotesResponse: {
            notes?: components["schemas"]["NoteItemResponse"][] | null;
            /** Format: int32 */
            total?: number;
            /** Format: int32 */
            count?: number;
            /** Format: int32 */
            lastPage?: number;
            canLoadMore?: boolean;
            /** Format: int32 */
            page?: number;
            searchTerm?: string | null;
            keywords?: string[] | null;
            foundWholePhrase?: boolean;
        };
        SectionItemResponse: {
            /** Format: int64 */
            id?: number;
            name?: string | null;
            displayName?: string | null;
            color?: string | null;
        };
        SectionsResponse: {
            message?: string | null;
            showNotification?: boolean;
            sections: components["schemas"]["SectionItemResponse"][] | null;
        };
        SourceItemResponse: {
            id?: string | null;
            link?: string | null;
            title?: string | null;
            description?: string | null;
            image?: string | null;
            showImage?: boolean;
        };
        SourcesResponse: {
            message?: string | null;
            showNotification?: boolean;
            sources: components["schemas"]["SourceItemResponse"][] | null;
        };
        SuccessResponse: {
            message?: string | null;
            showNotification?: boolean;
        };
        TagItemResponse: {
            name: string | null;
            /** Format: int64 */
            count: number;
        };
        UpdateNoteBookRequest: {
            /** Format: int64 */
            id: number;
            book: string;
        };
        UpdateNoteRequest: {
            /** Format: int64 */
            id: number;
            title: string;
            content: string;
        };
        UpdateNoteSectionRequest: {
            /** Format: int64 */
            id: number;
            section: string;
        };
        UpdateNoteSourceRequest: {
            /** Format: int64 */
            noteId: number;
            sourceId: string;
            /** Format: uri */
            link: string;
            title?: string | null;
            description?: string | null;
            image?: string | null;
            showImage?: boolean;
        };
        UpdateNoteTagsRequest: {
            /** Format: int64 */
            id: number;
            tags: string[];
        };
        UpdateSectionRequest: {
            /** Format: int64 */
            id: number;
            displayName: string;
            color: string;
        };
        UserResponse: {
            id?: string | null;
            email?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
